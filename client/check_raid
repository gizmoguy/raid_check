#!/bin/bash
#
# Check MD arrays and 3ware arrays on the current machine and give nagios compatible output

# Config options
TW_BIN="/usr/local/bin/tw_cli"
TW_OUTPUT_DIR="/tmp/tw_cli"

function check_mds {
	# Get count of raid arrays
	RAID_DEVICES=`grep ^md -c /proc/mdstat`

	# Get count of degraded arrays
	RAID_STATUS=`grep "\[.*_.*\]" /proc/mdstat -c`

	# Is an array currently recovering or resyncing, get percentage of recovery
	RAID_RECOVER=`grep recovery /proc/mdstat | awk '{print $4}'`
	RAID_RESYNC=`grep resync /proc/mdstat | awk '{print $4}'`

	# Check raid status
	if [[ $RAID_RECOVER ]]; then
		# RAID recovery --> Warning
		MD_MSG="Checked $RAID_DEVICES MD arrays, recovering: $RAID_RECOVER"
		MD_STATUS=1
	elif [[ $RAID_RESYNC ]]; then
		# RAID resync --> Warning
		MD_MSG="Checked $RAID_DEVICES MD arrays, resync: $RAID_RESYNC"
		MD_STATUS=1
	elif [[ $RAID_STATUS == "0" ]]; then
		# RAID ok
		MD_MSG="$RAID_DEVICES healthy MD arrays"
		MD_STATUS=0
	else
		# All else critical, better safe than sorry
		MD_MSG="$RAID_STATUS of $RAID_DEVICES MD arrays have FAILED"
		MD_STATUS=2
	fi
}

function check_3ware {
	# Make sure we have output from 3ware cli and that it's recent
	if [ -e "$TW_OUTPUT_DIR/info" ]; then
		if test `find "$TW_OUTPUT_DIR/info" -mmin -30`; then
			CONTROLLERS=`grep -E "^c" "$TW_OUTPUT_DIR/info" | awk '{print $1}'`

			for c in $CONTROLLERS; do
				UNITSTATUS=`grep -E "^u" "$TW_OUTPUT_DIR/unitstatus_$c" | awk '{print $3}'`

				# Create an array containing the units
				UNIT=(`grep -E "^u" "$TW_OUTPUT_DIR/unitstatus_$c" | awk '{print $1}'`)

				#Counter for the array
				COUNT=0
				for j in $UNITSTATUS; do
					case "$j" in
						OK)
							CHECKUNIT=`grep -E "${UNIT[$COUNT]}" "$TW_OUTPUT_DIR/unitstatus_$c" | awk '{print $1}'`
							UNITNAME="/$c/$CHECKUNIT"

							if [ -z	"$TW_OK_MSG" ]; then
								TW_OK_MSG="$UNITNAME is healthy"
							else
								TW_OK_MSG="$TW_OK_MSG, $UNITNAME is healthy"
							fi

							PREEXITCODE=0
						;;
						VERIFYING)
							CHECKUNIT=`grep -E "${UNIT[$COUNT]}" "$TW_OUTPUT_DIR/unitstatus_$c" | awk '{print $1,$3,$5}'`
							UNITNAME="/$c/$CHECKUNIT"

							if [ -z	"$TW_OK_MSG" ]; then
								TW_OK_MSG="$UNITNAME"
							else
								TW_OK_MSG="$TW_OK_MSG, $UNITNAME"
							fi

							PREEXITCODE=0
						;;
						REBUILDING)
							CHECKUNIT=`grep -E "${UNIT[$COUNT]}" "$TW_OUTPUT_DIR/unitstatus_$c" | awk '{print $1,$3,$4}'`
							UNITNAME="/$c/$CHECKUNIT"

							if [ -z	"$TW_MSG" ]; then
								TW_MSG="$UNITNAME"
							else
								TW_MSG="$TW_MSG, $UNITNAME"
							fi

							PREEXITCODE=1
						;;
						DEGRADED)
							CHECKUNIT=`grep -E "${UNIT[$COUNT]}" "$TW_OUTPUT_DIR/unitstatus_$c" | awk '{print $1,$3}'`
							UNITNAME="/$c/$CHECKUNIT"
							# Check which disk has failed
							DRIVE=`grep -E "${UNIT[$COUNT]}" "$TW_OUTPUT_DIR/drivestatus_$c" | grep -v -i "OK" | awk '{print $1,$2}'`

							if [ -z	"$TW_MSG" ]; then
								TW_MSG="$UNITNAME Reason: $DRIVE"
							else
								TW_MSG="$TW_MSG, $UNITNAME Reason: $DRIVE"
							fi

							PREEXITCODE=2
						;;
						*)
							CHECKUNIT=`grep -E "${UNIT[$COUNT]}" "$TW_OUTPUT_DIR/unitstatus_$c"`
							UNITNAME="/$c/$CHECKUNIT"

							if [ -z	"$TW_MSG" ]; then
								TW_MSG="$UNITNAME"
							else
								TW_MSG="$TW_MSG, $UNITNAME"
							fi

							PREEXITCODE=3
						;;
					esac

					# Make sure we always exit with the most important warning
					# OK is least and UNKNOWN is the most important in this case
					if [ $PREEXITCODE -gt $TW_STATUS ]; then
						TW_STATUS=$PREEXITCODE
					fi

					let COUNT=$COUNT+1
				done
			done

			TW_NEW_MSG=""

			if [ ! -z "$TW_MSG" ]; then
				TW_NEW_MSG="$TW_MSG"
			fi

			if [ ! -z "$TW_MSG" -a ! -z "$TW_OK_MSG" ]; then
				TW_NEW_MSG="$TW_NEW_MSG, "
			fi

			if [ ! -z "$TW_OK_MSG" ]; then
				TW_NEW_MSG="${TW_NEW_MSG}${TW_OK_MSG}"
			fi
			
			TW_MSG="$TW_NEW_MSG"
		else
			TW_MSG="Stale tw_cli output file"
			TW_STATUS=2
		fi

	else
		TW_MSG="No output from tw_cli"
		TW_STATUS=2
	fi
}

# Initialise all variables
MD_STATUS=0
MD_MSG=""
TW_STATUS=0
TW_MSG=""
TW_OK_MSG=""
HAS_MD=0
HAS_TW=0

if [ -e "/proc/mdstat" ]; then
	# Test MDs
	HAS_MD=1
	check_mds
fi

if [ -e "$TW_BIN" ]; then
	# Test 3ware RAID
	HAS_TW=1
	check_3ware
fi

# We've got MDs present so print the mdstat status
if [ $HAS_MD -eq 1 ]; then
	echo -n $MD_MSG
fi

# Both MD and 3ware RAIDs present, separate messages with a comma
if [ $HAS_MD -eq 1 -a $HAS_TW -eq 1 ]; then
	echo -n ", "
fi

# We've got 3ware so print the 3ware message
if [ $HAS_TW -eq 1 ]; then
	echo -n $TW_MSG
fi

# Didn't detect any RAID devices
if [ $HAS_MD -eq 0 -a $HAS_TW -eq 0 ]; then
	echo -n "No RAID devices to check"
fi

# Work out what to return
if [ $MD_STATUS -ge 2 -o $TW_STATUS -ge 2 ]; then
	# Status CRITICAL
	echo " : CRITICAL"
	exit 2
elif [ $MD_STATUS -eq 1 -o $TW_STATUS -eq 1 ]; then 
	# Status WARNING
	echo " : WARNING"
	exit 1
else
	# Status OK
	echo " : OK"
	exit 0
fi
